<html>
<head>
<title>JavaScript Wolfenstein 3D Engine - Step 3: Sprites</title>
<!--
This file is part of the article series by Jacob Seidelin about
creating a ray casting engine with JavaScript, DOM and Canvas.

If you have questions or comments, please contact the author at
either jseidelin@nihilogic.dk or http://blog.nihilogic.dk/

The code samples here are freely available under the MIT license.
See: [http://www.nihilogic.dk/licenses/mit-license.txt]

The graphics for sprites and walls are property of id Software.
-->

<style>

div#minimapcontainer {

}
canvas#minimap {
 position : absolute;
}
canvas#minimapobjects {
 position : absolute;
}

div#overlay {
 position : absolute;
 width : 310px;
 height : 190px;
 padding : 5px;
 color : white;
 font-family : lucida console, courier new;
 font-size : 10px;
 z-index : 1;
}

      div#floor {
       position : absolute;
       width : 100%;
       height : 100%;
       z-index: -100000000;
       background-color: #c0a570;
      }

      div#ceiling {
       position : absolute;
       width : 100%;
       height : 50%;
       background-color : #429bf5;
       z-index: -100000000;
      }

#screen {
 position : relative;
 width : 1080px;
 height : 540px;
 border : 1px solid black;
 overflow : hidden;
}

</style>

<script src="excanvas.js" type="text/javascript"></script>

</head>
<body>

<div id="screen">
	<div id="floor"></div>
	<div id="ceiling"></div>
</div>

<div id="minimapcontainer">
	<canvas id="minimap"></canvas>
	<canvas id="minimapobjects"></canvas>
</div>

<div id="debug"></div>

<script type="text/javascript">

// just a few helper functions
var $ = function(id) { return document.getElementById(id); };
var dc = function(tag) { return document.createElement(tag); };

// indexOf for IE. From: https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf
if(!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt /*, from*/) {
		var len = this.length;
		var from = Number(arguments[1]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if(from < 0)
			from += len;
		for (; from < len; from++) {
			if(from in this && this[from] === elt)
				return from;
		}
		return -1;
	};
}


var map = [
  [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,7,7,7,0,0,0,0,0,0,1,3,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,4,4,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,4,4,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,3,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,4,0,0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,6,6,6,6,3,3,3,3,3,3,3,3,3],
  [3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [10,10,10,10,10,10,10,10,10,3,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3]
];
//	 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
var floorlayout = [
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,0,0,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,0,0,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,3,3,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
];

var itemTypes = [
	{ img : "sprites/tablechairs.png", block : true },	// 0
	{ img : "sprites/armor.png", block : true },		// 1
	{ img : "sprites/plantgreen.png", block : true },	// 2
	{ img : "sprites/lamp.png", block : false },		// 3
  { img : "sprites/tree.png", block : true }, // 4
  { img : "sprites/pillar.png", block : true }, // 5
  { img : "sprites/tree2.png", block : true }, // 6
	{ img : "sprites/snowtree1.png", block : true }, // 7
  { img : "sprites/tree3.png", block : true }, // 8
  { img : "sprites/tree4.png", block : true }, // 9
  { img : "sprites/rock.png", block : true }, // 10
  { img : "sprites/tree5.png", block : true }, // 11
  { img : "sprites/snowtree2.png", block : true }, // 12
  { img : "sprites/tallgrass.png", block : false}, // 13
  { img : "sprites/treeoflife.png", block : true }, // 14
  { img : "sprites/blastoise.gif", block : true }, // 15
  { img : "sprites/charizard.gif", block : true }, // 16
];

var mapItems = [

	// lamps in center area
	{type:15, x:10, y:9},
  {type:6, x:15, y:7},
  {type:11, x:15, y:15},
  {type:16, x:12, y:14},
  {type:12, x:27, y:7},
  {type:12, x:28, y:17},
  /*{type:13, x:8, y:3},
  {type:13, x:9, y:3},
  {type:13, x:10, y:3},
  {type:13, x:11, y:3},
  {type:13, x:7, y:3},
  {type:13, x:8, y:3},
  {type:13, x:8, y:4},
  {type:13, x:9, y:4},
  {type:13, x:10, y:4},
  {type:13, x:11, y:4},
  {type:13, x:7, y:4},
  {type:13, x:8, y:4},
  {type:13, x:8, y:2},
  {type:13, x:9, y:2},
  {type:13, x:10, y:2},
  {type:13, x:11, y:2},
  {type:13, x:7, y:2},
  {type:13, x:8, y:2},*/
	{type:4, x:20, y:7},

	// lamps in bottom corridor
	{type:7, x:5, y:22},
	{type:6, x:12, y:21},
	{type:8, x:19, y:22},
  {type:5, x:17, y:10},
	{type:9, x:8, y:18},
	{type:10, x:17, y:19},
	{type:9, x:26, y:12}
];


var player = {
	x : 2,		// current x, y position
	y : 2,
	dir : 0,		// the direction that the player is turning, either -1 for left or 1 for right.
	rotDeg : 90,		// the current angle of rotation
	rot : 0,		// rotation in radians
	speed : 0,		// is the playing moving forward (speed = 1) or backwards (speed = -1).
	moveSpeed : 0.10,	// how far (in map units) does the player move each step/update
	rotSpeed : 3		// how much does the player rotate each step/update (in degrees)
}

var mapWidth = 0;
var mapHeight = 0;

var miniMapScale = 8;

var screenWidth = 1080;
var screenHeight = 540;

var showOverlay = true;
var stripWidth = 2;
var fov = 60 * Math.PI / 180;

var numRays = Math.ceil(screenWidth / stripWidth);
var fovHalf = fov / 2;

var viewDist = (screenWidth/2) / Math.tan((fov / 2));

var twoPI = Math.PI * 2;

var numTextures = 10;
var wallTextures = [
	"walls_1.png",
	"walls_2.png",
	"walls_3.png",
	"walls_4.png",
  "walls_5.png",
  "walls_6.png",
  "walls_7.png",
  "walls_8.png",
  "walls_9.png",
  "walls_10.png",
];
var floorTextures = [
	"floor_1.png",
	"floor_2.png",
	"floor_3.png",
	"floor_4.png",
  "floor_5.png",
  "floor_6.png",
  "floor_7.png",
  "floor_8.png",
  "floor_9.png",
  "floor_10.png",
];

var userAgent = navigator.userAgent.toLowerCase();
var isGecko = userAgent.indexOf("gecko") != -1 && userAgent.indexOf("safari") === -1;

// enable this to use a single image file containing all wall textures. This performs better in Firefox. Opera likes smaller images.
var useSingleTexture = isGecko;

var screenStrips = [];
var floorPixels = [[]];
var overlay;

var fps = 0;
var overlayText = "";

function init() {

	mapWidth = map[0].length;
	mapHeight = map.length;

	bindKeys();

	initScreen();

	initSprites();

	drawMiniMap();

	gameCycle();
	renderCycle();
}

var spriteMap;
var visibleSprites = [];
var oldVisibleSprites = [];

function initSprites() {
	spriteMap = [];
	for (var y=0;y<map.length;y++) {
		spriteMap[y] = [];
	}

	var screen = $("screen");

	for (var i=0;i<mapItems.length;i++) {
		var sprite = mapItems[i];
		var itemType = itemTypes[sprite.type];
		var img = dc("img");
		img.src = itemType.img;
		img.style.display = "none";
		img.style.position = "absolute";

		sprite.visible = false;
		sprite.block = itemType.block;
		sprite.img = img;

		spriteMap[sprite.y][sprite.x] = sprite;
		screen.appendChild(img);
	}

}

var lastGameCycleTime = 0;
var gameCycleDelay = 1000 / 30; // aim for 30 fps for game logic

function gameCycle() {
	var now = new Date().getTime();

	// time since last game logic
	var timeDelta = now - lastGameCycleTime;

	move(timeDelta);

	var cycleDelay = gameCycleDelay;

	// the timer will likely not run that fast due to the rendering cycle hogging the cpu
	// so figure out how much time was lost since last cycle

	if(timeDelta > cycleDelay) {
		cycleDelay = Math.max(1, cycleDelay - (timeDelta - cycleDelay))
	}

	setTimeout(gameCycle, cycleDelay);

	lastGameCycleTime = now;
}


var lastRenderCycleTime = 0;

function renderCycle() {

	updateMiniMap();

	clearSprites();

  castFloorRays();

	castRays();

	renderSprites();

	// time since last rendering
	var now = new Date().getTime();
	var timeDelta = now - lastRenderCycleTime;
	var cycleDelay = 1000 / 30;
	if(timeDelta > cycleDelay) {
		cycleDelay = Math.max(1, cycleDelay - (timeDelta - cycleDelay))
	}
	lastRenderCycleTime = now;
	setTimeout(renderCycle, cycleDelay);

	fps = 1000 / timeDelta;
	if(showOverlay) {
		updateOverlay();
	}
}

function clearSprites() {
	// clear the visible sprites array but keep a copy in oldVisibleSprites for later.
	// also mark all the sprites as not visible so they can be added to visibleSprites again during raycasting.
	oldVisibleSprites = [];
	for (var i=0;i<visibleSprites.length;i++) {
		var sprite = visibleSprites[i];
		oldVisibleSprites[i] = sprite;
		sprite.visible = false;
	}
	visibleSprites = [];
}

function renderSprites() {

	for (var i=0;i<visibleSprites.length;i++) {
		var sprite = visibleSprites[i];
		var img = sprite.img;
		img.style.display = "block";

		// translate position to viewer space
		var dx = sprite.x + 0.5 - player.x;
		var dy = sprite.y + 0.5 - player.y;

		// distance to sprite
		var dist = Math.sqrt(dx*dx + dy*dy);

		// sprite angle relative to viewing angle
		var spriteAngle = Math.atan2(dy, dx) - player.rot;

		// size of the sprite
		var size = viewDist / (Math.cos(spriteAngle) * dist);

		if(size <= 0) continue;

		// x-position on screen
		var x = Math.tan(spriteAngle) * viewDist;

		img.style.left = (screenWidth/2 + x - size/2) + "px";

		// y is constant since we keep all sprites at the same height and vertical position
		img.style.top = ((screenHeight-size)/2)+"px";

		var dbx = sprite.x - player.x;
		var dby = sprite.y - player.y;

		img.style.width = size + "px";
		img.style.height =  size + "px";

		var blockDist = dbx*dbx + dby*dby;
		img.style.zIndex = -Math.floor(blockDist*1000);
	}

	// hide the sprites that are no longer visible
	for (var i=0;i<oldVisibleSprites.length;i++) {
		var sprite = oldVisibleSprites[i];
		if(visibleSprites.indexOf(sprite) < 0) {
			sprite.visible = false;
			sprite.img.style.display = "none";
		}
	}

}

function updateOverlay() {
	overlay.innerHTML = "FPS: " + fps.toFixed(1) + "<br/>" + overlayText;
	overlayText = "";
}


function initScreen() {

  var screen = $("screen");
	var floor = $("floor");

	for (var i=0;i<screenWidth;i+=stripWidth) {
		var strip = dc("img");
		strip.style.position = "absolute";
		strip.style.left = 0 + "px";
		strip.style.height = "0px";
		strip.oldStyles = {
			left : 0,
			top : 0,
			width : 0,
			height : 0,
			clip : "",
			src : ""
		};
		screenStrips.push(strip);
		screen.appendChild(strip);
    for (var j=screenHeight/2+1;j<screenHeight;j+=stripWidth) {
  		var pix = dc("img");
  		pix.style.position = "absolute";
  		pix.style.left = 0 + "px";
  		pix.style.height = "0px";

  		pix.oldStyles = {
  			left : 0,
  			top : 0,
  			width : 0,
  			height : 0,
  			clip : "",
  			src : ""
  		};
  		floorPixels[i/stripWidth].push(pix);
  		floor.appendChild(pix);
  	}
    floorPixels.push([]);
	}

	// overlay div for adding text like fps count, etc.
	overlay = dc("div");
	overlay.id = "overlay";
	overlay.style.display = showOverlay ? "block" : "none";
	screen.appendChild(overlay);

}

// bind keyboard events to game functions (movement, etc)
function bindKeys() {

	document.onkeydown = function(e) {
		e = e || window.event;

		switch (e.keyCode) { // which key was pressed?

			case 38: // up, move player forward, ie. increase speed
				player.speed = 1;
				break;

			case 40: // down, move player backward, set negative speed
				player.speed = -1;
				break;

			case 37: // left, rotate player left
				player.dir = -1;
				break;

			case 39: // right, rotate player right
				player.dir = 1;
				break;
		}
	}

	document.onkeyup = function(e) {
		e = e || window.event;

		switch (e.keyCode) {
			case 38:
			case 40:
				player.speed = 0;	// stop the player movement when up/down key is released
				break;
			case 37:
			case 39:
				player.dir = 0;
				break;
		}
	}
}
function castFloorRays(){
  for(var y = screenHeight/2; y < screenHeight; y+=stripWidth){
    //some values
    var projectionPlaneDist = screenHeight/(2*Math.tan(fovHalf*Math.PI/180));
    var dirX = projectionPlaneDist * Math.cos(player.rotDeg*Math.PI/180);
    var dirY = projectionPlaneDist * Math.sin(player.rotDeg*Math.PI/180);
    var planeX = screenWidth*Math.cos(player.rotDeg*Math.PI/180)/2;
    var planeY = screenWidth*Math.sin(player.rotDeg*Math.PI/180)/2;
    // rayDir for leftmost ray (x = 0) and rightmost ray (x = w)
    var rayDirX0 = dirX - planeX;
    var rayDirY0 = dirY - planeY;
    var rayDirX1 = dirX + planeX;
    var rayDirY1 = dirY + planeY;
    // Current y position compared to the center of the screen (the horizon)
    var p = y - screenHeight / 2;
    // Vertical position of the camera.
    var posZ = 0.5 * screenHeight;
    // Horizontal distance from the camera to the floor for the current row.
    // 0.5 is the z position exactly in the middle between floor and ceiling.
    var rowDistance = posZ / p;
    // calculate the real world step vector we have to add for each x (parallel to camera plane)
    // adding step by step avoids multiplications with a weight in the inner loop
    var floorStepX = rowDistance * (rayDirX1 - rayDirX0) / screenWidth;
  	var floorStepY = rowDistance * (rayDirY1 - rayDirY0) / screenWidth;
    // real world coordinates of the leftmost column. This will be updated as we step to the right.
    var floorX = player.x + rowDistance * rayDirX0;
    var floorY = player.y + rowDistance * rayDirY0;
    for(var x = 0; x < screenWidth; x+=stripWidth){
			// the cell coord is simply got from the integer parts of floorX and floorY
      var cellX = Math.floor(floorX);
      var cellY = Math.floor(floorY);
      // get the texture coordinate from the fractional part
      var tx = floorX - cellX;
      var ty = floorY - cellY;
      floorX += floorStepX;
      floorY += floorStepY;
      // choose texture and draw the pixel
      var floorTexture = floorTextures[0];
      /*var floorPixel = floorPixels[x/stripWidth][(y-screenHeight/2)/stripWidth];
      floorPixel.src = floorTexture;
      var imgTop = ty;
  		var styleHeight = stripWidth;
  		if(floorPixel.oldStyles.height != styleHeight) {
  			floorPixel.style.height = styleHeight + "px";
  			floorPixel.oldStyles.height = styleHeight
  		}
  		var styleWidth = Math.floor(2);
  		if(floorPixel.oldStyles.width != styleWidth) {
  			floorPixel.style.width = styleWidth +"px";
  			floorPixel.oldStyles.width = styleWidth;
  		}
  		var styleTop = y - imgTop;
  		if(floorPixel.oldStyles.top != styleTop) {
  			floorPixel.style.top = styleTop + "px";
  			floorPixel.oldStyles.top = styleTop;
  		}
  		var styleLeft = x*stripWidth - tx;
  		if(floorPixel.oldStyles.left != styleLeft) {
  			floorPixel.style.left = styleLeft + "px";
  			floorPixel.oldStyles.left = styleLeft;
  		}
  		var styleClip = "rect(" + imgTop + ", " + (tx + stripWidth)  + ", " + (imgTop + floorStepY) + ", " + tx + ")";
  		if(floorPixel.oldStyles.clip != styleClip) {
  			floorPixel.style.clip = styleClip;
  			floorPixel.oldStyles.clip = styleClip;
  		}
  		floorPixel.style.zIndex = Math.floor(y*1000);*/
      //Uint32 color;
      //color = texture[floorTexture][64 * ty + tx];
      //color = (color >> 1) & 8355711; // make a bit darker
      //buffer[y][x] = color;
    }
  }
}
function castRays() {
	var stripIdx = 0;
	for (var i=0;i<numRays;i++) {
		// where on the screen does ray go through?
		var rayScreenPos = (-numRays/2 + i) * stripWidth;

		// the distance from the viewer to the povar on the screen, simply Pythagoras.
		var rayViewDist = Math.sqrt(rayScreenPos*rayScreenPos + viewDist*viewDist);

		// the angle of the ray, relative to the viewing direction.
		// right triangle: a = sin(A) * c
		var rayAngle = Math.asin(rayScreenPos / rayViewDist);

		castSingleRay(
			player.rot + rayAngle, 	// add the players viewing direction to get the angle in world space
			stripIdx++
		);
	}
}

function castSingleRay(rayAngle, stripIdx) {

	// first make sure the angle is between 0 and 360 degrees
	rayAngle %= twoPI;
	if(rayAngle < 0) rayAngle += twoPI;

	// moving right/left? up/down? Determined by which quadrant the angle is in.
	var right = (rayAngle > twoPI * 0.75 || rayAngle < twoPI * 0.25);
	var up = (rayAngle < 0 || rayAngle > Math.PI);
  //WALL CASTING
	var wallType = 0;

	// only do these once
	var angleSin = Math.sin(rayAngle);
	var angleCos = Math.cos(rayAngle);

	var dist = 0;	// the distance to the block we hit
	var xHit = 0; 	// the x and y coord of where the ray hit the block
	var yHit = 0;
	var xWallHit = 0;
	var yWallHit = 0;

	var textureX;	// the x-coord on the texture of the block, ie. what part of the texture are we going to render
	var wallX;	// the (x,y) map coords of the block
	var wallY;

	var wallIsShaded = false;

	var wallIsHorizontal = false;

	// first check against the vertical map/wall lines
	// we do this by moving to the right or left edge of the block we're standing in
	// and then moving in 1 map unit steps horizontally. The amount we have to move vertically
	// is determined by the slope of the ray, which is simply defined as sin(angle) / cos(angle).

	var slope = angleSin / angleCos; 	// the slope of the straight line made by the ray
	var dXVer = right ? 1 : -1; 	// we move either 1 map unit to the left or right
	var dYVer = dXVer * slope; 	// how much to move up or down

	var x = right ? Math.ceil(player.x) : Math.floor(player.x);	// starting horizontal position, at one of the edges of the current map block
	var y = player.y + (x - player.x) * slope;			// starting vertical position. We add the small horizontal step we just made, multiplied by the slope.
  var side;
	while (x >= 0 && x < mapWidth && y >= 0 && y < mapHeight) {
		var wallX = Math.floor(x + (right ? 0 : -1));
		var wallY = Math.floor(y);

		if(spriteMap[wallY][wallX] && !spriteMap[wallY][wallX].visible) {
			spriteMap[wallY][wallX].visible = true;
			visibleSprites.push(spriteMap[wallY][wallX]);
		}

		// is this povar inside a wall block?
		if(map[wallY][wallX] > 0) {
      side = 0;
			var distX = x - player.x;
			var distY = y - player.y;
			dist = distX*distX + distY*distY;	// the distance from the player to this point, squared.

			wallType = map[wallY][wallX]; // we'll remember the type of wall we hit for later
			textureX = y % 1;	// where exactly are we on the wall? textureX is the x coordinate on the texture that we'll use later when texturing the wall.
			if(!right) textureX = 1 - textureX; // if we're looking to the left side of the map, the texture should be reversed

			xHit = x;	// save the coordinates of the hit. We only really use these to draw the rays on minimap.
			yHit = y;
			xWallHit = wallX;
			yWallHit = wallY;

			// make horizontal walls shaded
			wallIsShaded = true;

			wallIsHorizontal = true;

			break;
		}
		x += dXVer;
		y += dYVer;
	}

	// now check against horizontal lines. It's basically the same, just "turned around".
	// the only difference here is that once we hit a map block,
	// we check if there we also found one in the earlier, vertical run. We'll know that if dist != 0.
	// If so, we only register this hit if this distance is smaller.

	var slope = angleCos / angleSin;
	var dYHor = up ? -1 : 1;
	var dXHor = dYHor * slope;
	var y = up ? Math.floor(player.y) : Math.ceil(player.y);
	var x = player.x + (y - player.y) * slope;

	while (x >= 0 && x < mapWidth && y >= 0 && y < mapHeight) {
		var wallY = Math.floor(y + (up ? -1 : 0));
		var wallX = Math.floor(x);

		if(spriteMap[wallY][wallX] && !spriteMap[wallY][wallX].visible) {
			spriteMap[wallY][wallX].visible = true;
			visibleSprites.push(spriteMap[wallY][wallX]);
		}

		if(map[wallY][wallX] > 0) {
			var distX = x - player.x;
			var distY = y - player.y;
			var blockDist = distX*distX + distY*distY;
			if(!dist || blockDist < dist) {
				dist = blockDist;
				xHit = x;
				yHit = y;
				xWallHit = wallX;
				yWallHit = wallY;

				wallType = map[wallY][wallX];
				textureX = x % 1;
				if(up) textureX = 1 - textureX;

				wallIsShaded = false;
			}
			break;
		}
		x += dXHor;
		y += dYHor;
	}

	if(dist) {
		//drawRay(xHit, yHit);
    side = 1;
		var strip = screenStrips[stripIdx];

		dist = Math.sqrt(dist);

		// use perpendicular distance to adjust for fish eye
		// distorted_dist = correct_dist / cos(relative_angle_of_ray)
		dist = dist * Math.cos(player.rot - rayAngle);

		// now calc the position, height and width of the wall strip

		// "real" wall height in the game world is 1 unit, the distance from the player to the screen is viewDist,
		// thus the height on the screen is equal to wall_height_real * viewDist / dist

		var height = Math.round(viewDist / dist);

		// width is the same, but we have to stretch the texture to a factor of stripWidth to make it fill the strip correctly
		var width = height * stripWidth;

		// top placement is easy since everything is centered on the x-axis, so we simply move
		// it half way down the screen and then half the wall height back up.
		var top = Math.round((screenHeight - height) / 2);

		var imgTop = 0;

		var styleHeight;
		if(true) {
			var styleSrc = wallTextures[wallType-1];
			if(strip.oldStyles.src != styleSrc) {
				strip.src = styleSrc;
				strip.oldStyles.src = styleSrc
			}
			var styleHeight = height;
		}

		if(strip.oldStyles.height != styleHeight) {
			strip.style.height = styleHeight + "px";
			strip.oldStyles.height = styleHeight
		}

		var texX = Math.round(textureX*width);
		if(texX > width - stripWidth)
			texX = width - stripWidth;
		texX += (wallIsShaded ? width : 0);

		var styleWidth = Math.floor(width*2);
		if(strip.oldStyles.width != styleWidth) {
			strip.style.width = styleWidth +"px";
			strip.oldStyles.width = styleWidth;
		}

		var styleTop = top - imgTop;
		if(strip.oldStyles.top != styleTop) {
			strip.style.top = styleTop + "px";
			strip.oldStyles.top = styleTop;
		}

		var styleLeft = stripIdx*stripWidth - texX;
		if(strip.oldStyles.left != styleLeft) {
			strip.style.left = styleLeft + "px";
			strip.oldStyles.left = styleLeft;
		}

		var styleClip = "rect(" + imgTop + ", " + (texX + stripWidth)  + ", " + (imgTop + height) + ", " + texX + ")";
		if(strip.oldStyles.clip != styleClip) {
			strip.style.clip = styleClip;
			strip.oldStyles.clip = styleClip;
		}

		var dwx = xWallHit - player.x;
		var dwy = yWallHit - player.y;

		var wallDist = dwx*dwx + dwy*dwy;
		strip.style.zIndex = -Math.floor(wallDist*1000);
	}
  /*//FLOOR CASTING
  var floorXWall, floorYWall; //x, y position of the floor texel at the bottom of the wall
  //4 different wall directions possible
  var mapX = parseInt(x);
  var mapY = parseInt(y);
  if(side === 0 && right){
    floorXWall = mapX;
    floorYWall = mapY + wallX;
  }else if(side === 0 && !(right)){
    floorXWall = mapX + 1.0;
    floorYWall = mapY + wallX;
  }
  else if(side === 1 && up){
    floorXWall = mapX + wallX;
    floorYWall = mapY;
  }else{
    floorXWall = mapX + wallX;
    floorYWall = mapY + 1.0;
  }

  var distWall, distPlayer, currentDist;

  distWall = dist;
  distPlayer = 0.0;
  var drawEnd = height/2+screenHeight/2;
  if(drawEnd < 0){
    drawEnd = screenHeight; //becomes < 0 when the integer overflows
  }
  //draw the floor from drawEnd to the bottom of the screen
  for(var y = drawEnd + 1; y < screenHeight; y+=stripWidth){
    currentDist = screenHeight / (2.0 * y - screenHeight); //you could make a small lookup table for this instead
    var weight = (currentDist - distPlayer) / (distWall - distPlayer);
    var currentFloorX = weight * floorXWall + (1.0 - weight) * x;
    var currentFloorY = weight * floorYWall + (1.0 - weight) * y;
    var floorTexX, floorTexY;
    floorTexX = currentFloorX - Math.floor(currentFloorX);
    floorTexY = currentFloorY - Math.floor(currentFloorY);
    var floorType = 0;
    var floorTexture = floorTextures[0]//floorTextures[floorlayout[mapY][mapX]-1];
    //draw the floor pixel
    var floorPixel = floorPixels[stripIdx][(y-drawEnd-1)/2];
    floorPixel.src = floorTexture;
    var imgTop = floorTexY;
		var styleHeight = stripWidth;
		if(floorPixel.oldStyles.height != styleHeight) {
			floorPixel.style.height = styleHeight + "px";
			floorPixel.oldStyles.height = styleHeight
		}
		var styleWidth = Math.floor(2);
		if(floorPixel.oldStyles.width != styleWidth) {
			floorPixel.style.width = styleWidth +"px";
			floorPixel.oldStyles.width = styleWidth;
		}
		var styleTop = y - imgTop;
		if(floorPixel.oldStyles.top != styleTop) {
			floorPixel.style.top = styleTop + "px";
			floorPixel.oldStyles.top = styleTop;
		}
		var styleLeft = stripIdx*stripWidth - floorTexX;
		if(floorPixel.oldStyles.left != styleLeft) {
			floorPixel.style.left = styleLeft + "px";
			floorPixel.oldStyles.left = styleLeft;
		}
		var styleClip = "rect(" + imgTop + ", " + (floorTexX + stripWidth)  + ", " + (imgTop + height) + ", " + floorTexX + ")";
		if(floorPixel.oldStyles.clip != styleClip) {
			floorPixel.style.clip = styleClip;
			floorPixel.oldStyles.clip = styleClip;
		}
		floorPixel.style.zIndex = Math.floor(y*1000);
  }*/
}

function drawRay(rayX, rayY) {
	var miniMapObjects = $("minimapobjects");
	var objectCtx = miniMapObjects.getContext("2d");

	objectCtx.strokeStyle = "rgba(0,100,0,0.3)";
	objectCtx.lineWidth = 0.5;
	objectCtx.beginPath();
	objectCtx.moveTo(player.x * miniMapScale, player.y * miniMapScale);
	objectCtx.lineTo(
		rayX * miniMapScale,
		rayY * miniMapScale
	);
	objectCtx.closePath();
	objectCtx.stroke();
}

function move(timeDelta) {
	// time timeDelta has passed since we moved last time. We should have moved after time gameCycleDelay,
	// so calculate how much we should multiply our movement to ensure game speed is constant
	var mul = timeDelta / gameCycleDelay;

	var moveStep = mul * player.speed * player.moveSpeed;	// player will move this far along the current direction vector

	player.rotDeg = player.rotDeg + mul * player.dir * player.rotSpeed; // add rotation if player is rotating (player.dir != 0)

	player.rotDeg = player.rotDeg % 360;

	var snap = (player.rotDeg+360) % 90
	if(snap < 2 || snap > 88) {
		player.rotDeg = Math.round(player.rotDeg / 90) * 90;
	}

	player.rot = player.rotDeg * Math.PI / 180;

	var newX = player.x + Math.cos(player.rot) * moveStep;	// calculate new player position with simple trigonometry
	var newY = player.y + Math.sin(player.rot) * moveStep;

	var pos = checkCollision(player.x, player.y, newX, newY, 0.35);

	player.x = pos.x; // set new position
	player.y = pos.y;
}

function checkCollision(fromX, fromY, toX, toY, radius) {
	var pos = {
		x : fromX,
		y : fromY
	};

	if(toY < 0 || toY >= mapHeight || toX < 0 || toX >= mapWidth)
		return pos;

	var blockX = Math.floor(toX);
	var blockY = Math.floor(toY);


	if(isBlocking(blockX,blockY)) {
		return pos;
	}

	pos.x = toX;
	pos.y = toY;

	var blockTop = isBlocking(blockX,blockY-1);
	var blockBottom = isBlocking(blockX,blockY+1);
	var blockLeft = isBlocking(blockX-1,blockY);
	var blockRight = isBlocking(blockX+1,blockY);

	if(blockTop != 0 && toY - blockY < radius) {
		toY = pos.y = blockY + radius;
	}
	if(blockBottom != 0 && blockY+1 - toY < radius) {
		toY = pos.y = blockY + 1 - radius;
	}
	if(blockLeft != 0 && toX - blockX < radius) {
		toX = pos.x = blockX + radius;
	}
	if(blockRight != 0 && blockX+1 - toX < radius) {
		toX = pos.x = blockX + 1 - radius;
	}

	// is tile to the top-left a wall
	if(isBlocking(blockX-1,blockY-1) != 0 && !(blockTop != 0 && blockLeft != 0)) {
		var dx = toX - blockX;
		var dy = toY - blockY;
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + radius;
			else
				toY = pos.y = blockY + radius;
		}
	}
	// is tile to the top-right a wall
	if(isBlocking(blockX+1,blockY-1) != 0 && !(blockTop != 0 && blockRight != 0)) {
		var dx = toX - (blockX+1);
		var dy = toY - blockY;
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + 1 - radius;
			else
				toY = pos.y = blockY + radius;
		}
	}
	// is tile to the bottom-left a wall
	if(isBlocking(blockX-1,blockY+1) != 0 && !(blockBottom != 0 && blockBottom != 0)) {
		var dx = toX - blockX;
		var dy = toY - (blockY+1);
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + radius;
			else
				toY = pos.y = blockY + 1 - radius;
		}
	}
	// is tile to the bottom-right a wall
	if(isBlocking(blockX+1,blockY+1) != 0 && !(blockBottom != 0 && blockRight != 0)) {
		var dx = toX - (blockX+1);
		var dy = toY - (blockY+1);
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + 1 - radius;
			else
				toY = pos.y = blockY + 1 - radius;
		}
	}

	return pos;
}

function isBlocking(x,y) {

	// first make sure that we cannot move outside the boundaries of the level
	if(y < 0 || y >= mapHeight || x < 0 || x >= mapWidth)
		return true;

	var ix = Math.floor(x);
	var iy = Math.floor(y);

	// return true if the map block is not 0, ie. if there is a blocking wall.
	if(map[iy][ix] != 0)
		return true;

	if(spriteMap[iy][ix] && spriteMap[iy][ix].block)
		return true;

	return false;

}

function updateMiniMap() {

	var miniMap = $("minimap");
	var miniMapObjects = $("minimapobjects");

	var objectCtx = miniMapObjects.getContext("2d");
	miniMapObjects.width = miniMapObjects.width;

	objectCtx.fillStyle = "red";
	objectCtx.fillRect(		// draw a dot at the current player position
		player.x * miniMapScale - 2,
		player.y * miniMapScale - 2,
		4, 4
	);

	objectCtx.strokeStyle = "red";
	objectCtx.beginPath();
	objectCtx.moveTo(player.x * miniMapScale, player.y * miniMapScale);
	objectCtx.lineTo(
		(player.x + Math.cos(player.rot) * 4) * miniMapScale,
		(player.y + Math.sin(player.rot) * 4) * miniMapScale
	);
	objectCtx.closePath();
	objectCtx.stroke();
}

function drawMiniMap() {

	// draw the topdown view minimap

	var miniMap = $("minimap");			// the actual map
	var miniMapCtr = $("minimapcontainer");		// the container div element
	var miniMapObjects = $("minimapobjects");	// the canvas used for drawing the objects on the map (player character, etc)

	miniMap.width = mapWidth * miniMapScale;	// resize the internal canvas dimensions
	miniMap.height = mapHeight * miniMapScale;	// of both the map canvas and the object canvas
	miniMapObjects.width = miniMap.width;
	miniMapObjects.height = miniMap.height;

	var w = (mapWidth * miniMapScale) + "px" 	// minimap CSS dimensions
	var h = (mapHeight * miniMapScale) + "px"
	miniMap.style.width = miniMapObjects.style.width = miniMapCtr.style.width = w;
	miniMap.style.height = miniMapObjects.style.height = miniMapCtr.style.height = h;

	var ctx = miniMap.getContext("2d");

	ctx.fillStyle = "white";
	ctx.fillRect(0,0,miniMap.width,miniMap.height);

	// loop through all blocks on the map
	for (var y=0;y<mapHeight;y++) {
		for (var x=0;x<mapWidth;x++) {

			var wall = map[y][x];

			if(wall > 0) { // if there is a wall block at this (x,y) ...
				ctx.fillStyle = "rgb(200,200,200)";
				ctx.fillRect(				// ... then draw a block on the minimap
					x * miniMapScale,
					y * miniMapScale,
					miniMapScale,miniMapScale
				);
			}

			if(spriteMap[y][x]) {
				ctx.fillStyle = "rgb(100,200,100)";
				ctx.fillRect(
					x * miniMapScale + miniMapScale*0.25,
					y * miniMapScale + miniMapScale*0.25,
					miniMapScale*0.5,miniMapScale*0.5
				);
			}
		}
	}

	updateMiniMap();
}

setTimeout(init, 1);

</script>



</body>

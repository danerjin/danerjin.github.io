<html>
<head>
<title>JavaScript 3D Engine</title>
<style>
#minimapcontainer{
  display:inline;
  margin:50px;
}
.slider {
  -webkit-appearance: none;
  width: 400px;
  height: 15px;
  background: #d3d3d3;
  outline: none;
  opacity: 0.7;
  -webkit-transition: .2s;
  transition: opacity .2s;
}

.slider:hover {
  opacity: 1;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 25px;
  height: 25px;
  background: #04AA6D;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  background: #04AA6D;
  cursor: pointer;
}
canvas#minimap {
 position : absolute;
}
canvas#minimapobjects {
 position : absolute;
}
p{
  font-family: monospace;
}
</style>
</head>
<body>
<canvas id="screen" width="960px" height="540px"></canvas>
<div id="minimapcontainer">
	<canvas id="minimap"></canvas>
	<canvas id="minimapobjects"></canvas>
</div>
<br><br>

<p>Use WASD to move, &lt;Space&gt; to jump, &lt;Shift&gt; to crouch, &lt;R&gt; to sprint, and the mouse to look around! Use the FOV slider to adjust FOV.</p>
<div class="slidecontainer">
  <input type="range" min="30" max="120" value="60" class="slider" id="myRange" onInput="updateFOV()">
  <p>FOV: <span id="fov">60</span></p>
</div>
<div id="looking"></div>
<div id="moving"></div>
<div id="debug"></div>
<script src="joy.js"></script>
<script type="text/javascript">

// just a few helper functions
var $ = function(id) { return document.getElementById(id); };
var dc = function(tag) { return document.createElement(tag); };
// indexOf for IE. From: https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf
if(!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt /*, from*/) {
		var len = this.length;
		var from = Number(arguments[1]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if(from < 0)
			from += len;
		for (; from < len; from++) {
			if(from in this && this[from] === elt)
				return from;
		}
		return -1;
	};
}


var map = [
  [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,7,7,7,0,0,0,0,0,0,1,3,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,3,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,4,4,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,3,0,0,3,0,0,3],
  [3,0,0,0,8,0,0,4,4,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,0,0,0,0,0,0,0,3],
  [3,0,0,0,8,0,0,0,0,11,11,11,11,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,4,0,0,0,4,0,0,11,0,0,0,0,0,0,0,0,0,6,6,11,11,3,3,3,3,3,3,3,3,3],
  [3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [10,10,10,10,10,10,10,10,10,3,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3],
  [5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3]
];
//	 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
var floorlayout = [
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,0,0,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0],
  [0,1,1,1,0,1,1,0,0,1,1,1,1,0,3,3,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,1,1,1,0,3,3,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0],
  [0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
];
/*
1 - 10 -- thick walls
11 -- glass
12 -- door
13 -- portal
*/
window.mobileAndTabletCheck = function() {
  let check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};
var wallTextures = []
for(var texture = 1; texture < 11;texture++){
    var wallTexture = new Image();
  	wallTexture.crossOrigin = "Anonymous";
  	wallTexture.src = `walls_${texture}.png`;
    wallTextures.push(wallTexture);
}
mobile = window.mobileAndTabletCheck();
var wallTypes = [0,[202,196,176],[235,106,14],[100, 198, 107],[108,69,39],[180, 179, 82],[205,164,52],[121,85,61],[189,236,182],[61,100,45],[230,50,68],[200,200,200]]
var canvas = $("screen");
var ctx = canvas.getContext('2d');
var bufferScreen = $("buffer");
var overlay;
gravity = 0.015
var player = {
	x : 2,		// current x, y position
	y : 2,
	dir : 0,		// the direction that the player is turning, either -1 for left or 1 for right.
	rotDeg : 90,		// the current angle of rotation
	rot : 0,		// rotation in radians
	speed : 0,		// is the playing moving forward (speed = 1) or backwards (speed = -1).
  strafeSpeed : 0, //strafing
	moveSpeed : 0.05,	// how far (in map units) does the player move each step/update
	rotSpeed : 3,		// how much does the player rotate each step/update (in degrees)
  pitch : 0, // pitch
  pitchChange : 0,
  z: 0, //feet to floor dist
  height: 0.5, // player height
  zSpeed: 0,
  isJumping: false,
  speedMult: 1
}

screenWidth = 960
screenHeight = 540
var miniMapScale = 8;

var stripWidth = 2;
var fov = 60 * Math.PI / 180;

var numRays = Math.ceil(screenWidth / stripWidth);
var fovHalf = fov / 2;

var viewDist = (screenWidth/2) / Math.tan((fov / 2));

var twoPI = Math.PI * 2;
var fps = 0;
var joyMovingDir;


var slider = document.getElementById("myRange");
function updateFOV(){
  fov = slider.value*Math.PI/180
  fovHalf = fov/2
  viewDist = (screenWidth/2) / Math.tan((fov / 2));
  $("fov").innerText = Math.round(fov*180/Math.PI)
}
function init() {
  if(mobile){
    var joyMoving = new JoyStick('moving',{
        // The ID of canvas element
        title: 'joystick',
        // width/height
        width: 100,
        height: 100,
        // Internal color of Stick
        internalFillColor: '#00AA00',
        // Border width of Stick
        internalLineWidth: 2,
        // Border color of Stick
        internalStrokeColor: '#003300',
        // External reference circonference width
        externalLineWidth: 2,
        //External reference circonference color
        externalStrokeColor: '#008000',
        // Sets the behavior of the stick
        autoReturnToCenter: true

    });
    joyMovingDir = joyMoving.GetDir();
  }

  canvas.addEventListener("click", async () => {
    await canvas.requestPointerLock();
    document.addEventListener("mousemove", updateMousePosition, false);
  });
  drawFillRectangle(0,0,screenWidth,screenHeight/2,'#429bf5');
  drawFillRectangle(0,screenHeight/2,screenWidth,screenHeight/2,'#c0a570');
	mapWidth = map[0].length;
	mapHeight = map.length;
	bind();

	drawMiniMap();
	gameCycle();
	renderCycle();
}

var lastGameCycleTime = 0;
var gameCycleDelay = 1000 / 60; // aim for 60 fps for game logic
var mousePos = [0,0];
var temp = [0,0];
var prevMousePos = [0,0];
var end = 8;
var start = 0;
function gameCycle() {
  if(mobile){
    if(joyMoving.GetDir() !== joyMovingDir){
      joyMovingDir = joyMoving.GetDir();
      switch(joyMovingDir){
        case 'N': // up, move player forward, ie. increase speed
  				player.speed = 1;
          player.strafeSpeed = 0;
  				break;

  			case 'S': // down, move player backward, set negative speed
  				player.speed = -1;
          player.strafeSpeed = 0;
  				break;

        case 'W': // strafe left
    			player.speed = 0;
  				player.strafeSpeed = 1;
  				break;

  			case 'E': // strafe right
    			player.speed = 0;
  				player.strafeSpeed = -1;
          break;
        case 'NW': // up, move player forward, ie. increase speed
  				player.speed = 1;
          player.strafeSpeed = 1;
  				break;

  			case 'NE': // down, move player backward, set negative speed
  				player.speed = 1;
          player.strafeSpeed = -1;
  				break;

        case 'SW': // strafe left
    			player.speed = -1;
  				player.strafeSpeed = 1;
  				break;

  			case 'SE': // strafe right
    			player.speed = -1;
  				player.strafeSpeed = -1;
  				break;
        case 'C':
          player.speed = 0;
          player.strafeSpeed = 0;
          break;

      }
    }
  }
  if(document.pointerLockElement === canvas){
    if(start === 0){
      temp = mousePos;
    }
    diffX = temp[0]-prevMousePos[0];
    diffY = temp[1]-prevMousePos[1];
    if(diffX > 0){player.dir = 1;}
    if(diffX < 0){player.dir = -1;}
    if(diffX === 0){player.dir = 0;}
    if(diffY > 0){player.pitchChange = -4;}
    if(diffY < 0){player.pitchChange = 4;}
    if(diffY === 0){player.pitchChange = 0;}
    prevMousePos = temp;
  }
	var now = new Date().getTime();
	// time since last game logic
	var timeDelta = now - lastGameCycleTime;
	move(timeDelta);
	var cycleDelay = gameCycleDelay;
	// the timer will likely not run that fast due to the rendering cycle hogging the cpu
	// so figure out how much time was lost since last cycle
	if(timeDelta > cycleDelay) {
		cycleDelay = Math.max(1, cycleDelay - (timeDelta - cycleDelay))
	}
	setTimeout(gameCycle, cycleDelay);
	lastGameCycleTime = now;
  start++;
  start =  start%end;
}


var lastRenderCycleTime = 0;
var drawFillRectangle = function(x, y, width, height, cssColor){
		ctx.fillStyle = cssColor;
    ctx.beginPath();
    ctx.rect(x, y, width, height);
    ctx.closePath();
    ctx.fill();
};
var drawFillRectangleRGBA = function(x, y, width, height,cssColor){
		ctx.fillStyle = `rgba(${cssColor[0]},${cssColor[1]},${cssColor[2]},${cssColor[3]})`;
    ctx.beginPath();
    ctx.rect(x, y, width, height);
    ctx.closePath();
    ctx.fill();
};
var drawWallSliceRectangle = function(x, y, width, height, xOffset,texture){
  wallTexture = wallTextures[texture-1]
	ctx.drawImage(wallTexture, Math.floor(xOffset*wallTexture.width/2), 0,
		1, wallTexture.height,
		x, y, width, height);
}
function renderCycle() {
  ctx.clearRect(0,0,screenWidth*2,screenHeight*2)
  drawFillRectangle(0,0,screenWidth,screenHeight/2+player.pitch+25*(player.height+player.z-0.5),'#429bf5');
  drawFillRectangle(0,screenHeight/2+player.pitch+25*(player.height+player.z-0.5),screenWidth,screenHeight/2-player.pitch-25*(player.height+player.z-0.5),'#c0a570');
	updateMiniMap();
	castRays();
	// time since last rendering
	var now = new Date().getTime();
	var timeDelta = now - lastRenderCycleTime;
	var cycleDelay = 1000 / 30;
	if(timeDelta > cycleDelay) {
		cycleDelay = Math.max(1, cycleDelay - (timeDelta - cycleDelay))
	}
	lastRenderCycleTime = now;
	setTimeout(renderCycle, cycleDelay);
	fps = 1000 / timeDelta;
  ctx.font = "15px monospace";
  ctx.fillStyle = "black";
  ctx.fillText("FPS: "+fps,50,50);
}

function updateMousePosition(e) {
  if(document.pointerLockElement === canvas){
    mousePos[0] += e.movementX;
    mousePos[1] += e.movementY;
  }
}

// bind keyboard events to game functions (movement, etc)
function bind() {
	document.onkeydown = function(e) {
		e = e || window.event;

		switch (e.keyCode) { // which key was pressed?

  		case 82: // sprint
        player.speedMult = 2
        player.height = 0.5
  			break;
  		case 16: // crouch
  			player.height = 0.2;
        player.speedMult = 0.2
  			break;

			case 32: // jump
        player.isJumping = true;
				break;

			case 38: // up
				player.pitchChange = 2;
				break;

			case 40: // down
				player.pitchChange = -2;
				break;

      case 87: // up, move player forward, ie. increase speed
  				player.speed = 1;
  				break;

			case 83: // down, move player backward, set negative speed
				player.speed = -1;
				break;

      case 65: // strafe left
				player.strafeSpeed = 1;
				break;

			case 68: // strafe right
				player.strafeSpeed = -1;
				break;

			case 37: // left, rotate player left
				player.dir = -1;
				break;

			case 39: // right, rotate player right
				player.dir = 1;
				break;
		}
	}

	document.onkeyup = function(e) {
		e = e || window.event;

		switch (e.keyCode) {
      case 82:
  		case 16: // up
  			player.height = 0.5;
        player.speedMult = 1;
  			break;
      case 32:
        player.isJumping = false;
		 case 38: // up
     case 40: // down
        player.pitchChange = 0;
      	break;
			case 87:
			case 83:
				player.speed = 0;	// stop the player movement when up/down key is released
				break;
			case 65:
			case 68:
				player.strafeSpeed = 0;	// stop the player movement when up/down key is released
				break;
			case 37:
			case 39:
				player.dir = 0;
				break;
		}
	}
}
function castRays() {
  var stripIdx = 0;
	for (var i=0;i<numRays;i++) {
		// where on the screen does ray go through?
		var rayScreenPos = (-numRays/2 + i) * stripWidth;

		// the distance from the viewer to the povar on the screen, simply Pythagoras.
		var rayViewDist = Math.sqrt(rayScreenPos*rayScreenPos + viewDist*viewDist);

		// the angle of the ray, relative to the viewing direction.
		// right triangle: a = sin(A) * c
		var rayAngle = Math.asin(rayScreenPos / rayViewDist);

		castSingleRay(
			player.rot + rayAngle, 	// add the players viewing direction to get the angle in world space
			stripIdx++
		);
	}
}
function castSingleRay(rayAngle, stripIdx) {
  var glassHitPoints = [];
	// first make sure the angle is between 0 and 360 degrees
	rayAngle %= twoPI;
	if(rayAngle < 0) rayAngle += twoPI;

	// moving right/left? up/down? Determined by which quadrant the angle is in.
	var right = (rayAngle > twoPI * 0.75 || rayAngle < twoPI * 0.25);
	var up = (rayAngle < 0 || rayAngle > Math.PI);
  //WALL CASTING
	var wallType = 0;

	// only do these once
	var angleSin = Math.sin(rayAngle);
	var angleCos = Math.cos(rayAngle);

	var dist = 0;	// the distance to the block we hit
	var xHit = 0; 	// the x and y coord of where the ray hit the block
	var yHit = 0;
	var xWallHit = 0;
	var yWallHit = 0;

	var textureX;	// the x-coord on the texture of the block, ie. what part of the texture are we going to render
	var wallX;	// the (x,y) map coords of the block
	var wallY;

	var wallIsShaded = false;

	// first check against the vertical map/wall lines
	// we do this by moving to the right or left edge of the block we're standing in
	// and then moving in 1 map unit steps horizontally. The amount we have to move vertically
	// is determined by the slope of the ray, which is simply defined as sin(angle) / cos(angle).

	var slope = angleSin / angleCos; 	// the slope of the straight line made by the ray
	var dXVer = right ? 1 : -1; 	// we move either 1 map unit to the left or right
	var dYVer = dXVer * slope; 	// how much to move up or down
  var glassHitHor = false;
  var thinga = 0;
	var x = right ? Math.ceil(player.x) : Math.floor(player.x);	// starting horizontal position, at one of the edges of the current map block
	var y = player.y + (x - player.x) * slope;			// starting vertical position. We add the small horizontal step we just made, multiplied by the slope.
  var prevWallX = Math.floor(player.x);
  var prevWallY = Math.floor(player.y);

  while (x >= 0 && x < mapWidth && y >= 0 && y < mapHeight) {
		var wallX = Math.floor(x + (right ? 0 : -1));
		var wallY = Math.floor(y);
		// is this povar inside a wall block?
    if(map[wallY][wallX] === 11 && map[prevWallY][prevWallX] !== 11) {
        glassHitPoints.push([y,x,up,right,thinga])
    }
		if(map[wallY][wallX] !== map[Math.floor(player.y)][Math.floor(player.x)] && map[wallY][wallX] !== 11) {
			var distX = x - player.x;
			var distY = y - player.y;
			dist = distX*distX + distY*distY;	// the distance from the player to this point, squared.

			wallType = map[wallY][wallX]; // we'll remember the type of wall we hit for later
			textureX = y % 1;	// where exactly are we on the wall? textureX is the x coordinate on the texture that we'll use later when texturing the wall.
			if(!right) textureX = 1 - textureX; // if we're looking to the left side of the map, the texture should be reversed

			xHit = x;	// save the coordinates of the hit. We only really use these to draw the rays on minimap.
			yHit = y;

			// make horizontal walls shaded
			wallIsShaded = true;
      if(!glassHitHor){glassHit=false;}
			break;
		}
    prevWallX = wallX;
    prevWallY = wallY;
    x += dXVer;
		y += dYVer;
	}

	// now check against horizontal lines. It's basically the same, just "turned around".
	// the only difference here is that once we hit a map block,
	// we check if there we also found one in the earlier, vertical run. We'll know that if dist != 0.
	// If so, we only register this hit if this distance is smaller.
  thinga = 1;
	var slope = angleCos / angleSin;
	var dYHor = up ? -1 : 1;
	var dXHor = dYHor * slope;
	var y = up ? Math.floor(player.y) : Math.ceil(player.y);
	var x = player.x + (y - player.y) * slope;
  var prevWallXHor = Math.floor(player.x);
  var prevWallYHor = Math.floor(player.y);
	while (x >= 0 && x < mapWidth && y >= 0 && y < mapHeight) {
		var wallY = Math.floor(y + (up ? -1 : 0));
		var wallX = Math.floor(x);
    if(map[wallY][wallX] === 11 && map[prevWallYHor][prevWallXHor] !== 11) {
        glassHitPoints.push([y,x,up,right,thinga])
    }
		if(map[wallY][wallX]  !== map[Math.floor(player.y)][Math.floor(player.x)] && map[wallY][wallX] !== 11) {
			var distX = x - player.x;
			var distY = y - player.y;
			var blockDist = distX*distX + distY*distY;
			if(!dist || blockDist < dist) {
				dist = blockDist;
				xHit = x;
				yHit = y;

				wallType = map[wallY][wallX];
				textureX = x % 1;
				if(up) textureX = 1 - textureX;

				wallIsShaded = false;
			}
			break;
		}
    prevWallXHor = wallX;
    prevWallYHor = wallY;
		x += dXHor;
		y += dYHor;
	}

	if(dist) {
		//drawRay(xHit, yHit);
    side = 1;
    var glassHits = [];
    dist = Math.sqrt(dist);
    for(let i = 0; i<glassHitPoints.length; i++){
      thing = glassHitPoints[i];
      var cond = map[Math.floor(thing[0]+(thing[4]?1:0)*(thing[2]?1:-1))][Math.floor(thing[1]-(thing[4]?0:1)*(thing[3]?1:-1))] !== 11;
      if (((thing[0]-player.y)**2+(thing[1]-player.x)**2)**0.5 < dist && cond){
        glassHits.push(((thing[0]-player.y)**2+(thing[1]-player.x)**2)**0.5 * Math.cos(player.rot - rayAngle))
      }
    }
    if(glassHits.length > 0){
      glassHits.sort(function(a, b){return b - a});
    }
		// use perpendicular distance to adjust for fish eye
		// distorted_dist = correct_dist / cos(relative_angle_of_ray)
		dist = dist * Math.cos(player.rot - rayAngle);

		// now calc the position, height and width of the wall strip

		// "real" wall height in the game world is 1 unit, the distance from the player to the screen is viewDist,
		// thus the height on the screen is equal to wall_height_real * viewDist / dist

		var height = Math.round(viewDist / dist);

		// width is the same, but we have to stretch the texture to a factor of stripWidth to make it fill the strip correctly
		var width = height * stripWidth;

		// top placement is easy since everything is centered on the x-axis, so we simply move
		// it half way down the screen and then half the wall height back up.
		var top = Math.round(screenHeight/2 - (1-(player.z+player.height))*height-(player.z+player.height))+player.pitch
		var styleHeight;
    mult = wallIsShaded?0.75:1;
    drawWallSliceRectangle(stripIdx*stripWidth,top,stripWidth,height,textureX+(wallIsShaded?1:0),wallType)
    for(let i = 0; i<glassHits.length;i++){
      var dist = glassHits[i]
      var height = Math.round(viewDist / dist);
  		var top = Math.round(screenHeight/2 - (1-(player.z+player.height))*height-(player.z+player.height))+player.pitch
      drawFillRectangleRGBA(stripIdx*stripWidth,top,stripWidth,height,[200,250,250,0.2])
    }
	}
  /*//FLOOR CASTING
  var floorXWall, floorYWall; //x, y position of the floor texel at the bottom of the wall
  //4 different wall directions possible
  var mapX = parseInt(x);
  var mapY = parseInt(y);
  if(side === 0 && right){
    floorXWall = mapX;
    floorYWall = mapY + wallX;
  }else if(side === 0 && !(right)){
    floorXWall = mapX + 1.0;
    floorYWall = mapY + wallX;
  }
  else if(side === 1 && up){
    floorXWall = mapX + wallX;
    floorYWall = mapY;
  }else{
    floorXWall = mapX + wallX;
    floorYWall = mapY + 1.0;
  }

  var distWall, distPlayer, currentDist;

  distWall = dist;
  distPlayer = 0.0;
  var drawEnd = height/2+screenHeight/2;
  if(drawEnd < 0){
    drawEnd = screenHeight; //becomes < 0 when the integer overflows
  }
  //draw the floor from drawEnd to the bottom of the screen
  for(var y = drawEnd + 1; y < screenHeight; y+=stripWidth){
    currentDist = screenHeight / (2.0 * y - screenHeight); //you could make a small lookup table for this instead
    var weight = (currentDist - distPlayer) / (distWall - distPlayer);
    var currentFloorX = weight * floorXWall + (1.0 - weight) * x;
    var currentFloorY = weight * floorYWall + (1.0 - weight) * y;
    var floorTexX, floorTexY;
    floorTexX = currentFloorX - Math.floor(currentFloorX);
    floorTexY = currentFloorY - Math.floor(currentFloorY);
    var floorType = 0;
    var floorTexture = floorTextures[0]//floorTextures[floorlayout[mapY][mapX]-1];
    //draw the floor pixel
    var floorPixel = floorPixels[stripIdx][(y-drawEnd-1)/2];
    floorPixel.src = floorTexture;
    var imgTop = floorTexY;
		var styleHeight = stripWidth;
		if(floorPixel.oldStyles.height != styleHeight) {
			floorPixel.style.height = styleHeight + "px";
			floorPixel.oldStyles.height = styleHeight
		}
		var styleWidth = Math.floor(2);
		if(floorPixel.oldStyles.width != styleWidth) {
			floorPixel.style.width = styleWidth +"px";
			floorPixel.oldStyles.width = styleWidth;
		}
		var styleTop = y - imgTop;
		if(floorPixel.oldStyles.top != styleTop) {
			floorPixel.style.top = styleTop + "px";
			floorPixel.oldStyles.top = styleTop;
		}
		var styleLeft = stripIdx*stripWidth - floorTexX;
		if(floorPixel.oldStyles.left != styleLeft) {
			floorPixel.style.left = styleLeft + "px";
			floorPixel.oldStyles.left = styleLeft;
		}
		var styleClip = "rect(" + imgTop + ", " + (floorTexX + stripWidth)  + ", " + (imgTop + height) + ", " + floorTexX + ")";
		if(floorPixel.oldStyles.clip != styleClip) {
			floorPixel.style.clip = styleClip;
			floorPixel.oldStyles.clip = styleClip;
		}
		floorPixel.style.zIndex = Math.floor(y*1000);
  }*/
}

function drawRay(rayX, rayY) {
	var miniMapObjects = $("minimapobjects");
	var objectCtx = miniMapObjects.getContext("2d");

	objectCtx.strokeStyle = "rgba(0,100,0,0.3)";
	objectCtx.lineWidth = 0.5;
	objectCtx.beginPath();
	objectCtx.moveTo(player.x * miniMapScale, player.y * miniMapScale);
	objectCtx.lineTo(
		rayX * miniMapScale,
		rayY * miniMapScale
	);
	objectCtx.closePath();
	objectCtx.stroke();
}

function move(timeDelta) {

	// time timeDelta has passed since we moved last time. We should have moved after time gameCycleDelay,
	// so calculate how much we should multiply our movement to ensure game speed is constant
  if (player.y >= 0.001){player.moveSpeed = 0.05;}else{player.moveSpeed = 0.069}
	var mul = timeDelta / gameCycleDelay;

	var moveStep = mul * player.speed * player.moveSpeed*player.speedMult;	// player will move this far along the current direction vector

  var moveStepStrafe = mul * player.strafeSpeed * player.moveSpeed*player.speedMult;

	player.rotDeg = player.rotDeg + mul * player.dir * player.rotSpeed; // add rotation if player is rotating (player.dir != 0)

	player.rotDeg = player.rotDeg % 360;
  if(-100 < player.pitch+player.pitchChange && player.pitch+player.pitchChange < 100){
    player.pitch += player.pitchChange
  }
	var snap = (player.rotDeg+360) % 90
	if(snap < 2 || snap > 88) {
		player.rotDeg = Math.round(player.rotDeg / 90) * 90;
	}

	player.rot = player.rotDeg * Math.PI / 180;

	var newX = player.x + Math.cos(player.rot) * moveStep + Math.sin(player.rot) * moveStepStrafe;	// calculate new player position with simple trigonometry
	var newY = player.y + Math.sin(player.rot) * moveStep - Math.cos(player.rot) * moveStepStrafe;
  player.zSpeed-=gravity;
  if(0 <= player.z+player.zSpeed){player.z+=player.zSpeed}else{player.zSpeed = 0;player.z=0;}
  if(player.isJumping){
  if(player.z < 0.01){
  player.zSpeed = 0.15;
}}
	var pos = checkCollision(player.x, player.y, newX, newY, 0.35);
	player.x = pos.x; // set new position
	player.y = pos.y;
}

function checkCollision(fromX, fromY, toX, toY, radius) {
	var pos = {
		x : fromX,
		y : fromY
	};
  if(map[Math.floor(fromY)][Math.floor(fromX)] !== 0){return {x:toX,y:toY}}
	if(toY < 0 || toY >= mapHeight || toX < 0 || toX >= mapWidth)
		return pos;

	var blockX = Math.floor(toX);
	var blockY = Math.floor(toY);


	if(isBlocking(blockX,blockY)) {
		return pos;
	}

	pos.x = toX;
	pos.y = toY;

	var blockTop = isBlocking(blockX,blockY-1);
	var blockBottom = isBlocking(blockX,blockY+1);
	var blockLeft = isBlocking(blockX-1,blockY);
	var blockRight = isBlocking(blockX+1,blockY);

	if(blockTop != 0 && toY - blockY < radius) {
		toY = pos.y = blockY + radius;
	}
	if(blockBottom != 0 && blockY+1 - toY < radius) {
		toY = pos.y = blockY + 1 - radius;
	}
	if(blockLeft != 0 && toX - blockX < radius) {
		toX = pos.x = blockX + radius;
	}
	if(blockRight != 0 && blockX+1 - toX < radius) {
		toX = pos.x = blockX + 1 - radius;
	}

	// is tile to the top-left a wall
	if(isBlocking(blockX-1,blockY-1) != 0 && !(blockTop != 0 && blockLeft != 0)) {
		var dx = toX - blockX;
		var dy = toY - blockY;
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + radius;
			else
				toY = pos.y = blockY + radius;
		}
	}
	// is tile to the top-right a wall
	if(isBlocking(blockX+1,blockY-1) != 0 && !(blockTop != 0 && blockRight != 0)) {
		var dx = toX - (blockX+1);
		var dy = toY - blockY;
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + 1 - radius;
			else
				toY = pos.y = blockY + radius;
		}
	}
	// is tile to the bottom-left a wall
	if(isBlocking(blockX-1,blockY+1) != 0 && !(blockBottom != 0 && blockBottom != 0)) {
		var dx = toX - blockX;
		var dy = toY - (blockY+1);
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + radius;
			else
				toY = pos.y = blockY + 1 - radius;
		}
	}
	// is tile to the bottom-right a wall
	if(isBlocking(blockX+1,blockY+1) != 0 && !(blockBottom != 0 && blockRight != 0)) {
		var dx = toX - (blockX+1);
		var dy = toY - (blockY+1);
		if(dx*dx+dy*dy < radius*radius) {
			if(dx*dx > dy*dy)
				toX = pos.x = blockX + 1 - radius;
			else
				toY = pos.y = blockY + 1 - radius;
		}
	}

	return pos;
}

function isBlocking(x,y) {

	// first make sure that we cannot move outside the boundaries of the level
	if(y < 0 || y >= mapHeight || x < 0 || x >= mapWidth)
		return true;
	var ix = Math.floor(x);
	var iy = Math.floor(y);
	// return true if the map block is not 0, ie. if there is a blocking wall.
	if(map[iy][ix] != 0)
		return true;

	return false;

}

function updateMiniMap() {

	var miniMap = $("minimap");
	var miniMapObjects = $("minimapobjects");

	var objectCtx = miniMapObjects.getContext("2d");
	miniMapObjects.width = miniMapObjects.width;

	objectCtx.fillStyle = "red";
	objectCtx.fillRect(		// draw a dot at the current player position
		player.x * miniMapScale - 2,
		player.y * miniMapScale - 2,
		4, 4
	);

	objectCtx.strokeStyle = "red";
	objectCtx.beginPath();
	objectCtx.moveTo(player.x * miniMapScale, player.y * miniMapScale);
	objectCtx.lineTo(
		(player.x + Math.cos(player.rot) * 4) * miniMapScale,
		(player.y + Math.sin(player.rot) * 4) * miniMapScale
	);
	objectCtx.closePath();
	objectCtx.stroke();
}

function drawMiniMap() {

	// draw the topdown view minimap

	var miniMap = $("minimap");			// the actual map
	var miniMapCtr = $("minimapcontainer");		// the container div element
	var miniMapObjects = $("minimapobjects");	// the canvas used for drawing the objects on the map (player character, etc)

	miniMap.width = mapWidth * miniMapScale;	// resize the internal canvas dimensions
	miniMap.height = mapHeight * miniMapScale;	// of both the map canvas and the object canvas
	miniMapObjects.width = miniMap.width;
	miniMapObjects.height = miniMap.height;

	var w = (mapWidth * miniMapScale) + "px" 	// minimap CSS dimensions
	var h = (mapHeight * miniMapScale) + "px"
	miniMap.style.width = miniMapObjects.style.width = miniMapCtr.style.width = w;
	miniMap.style.height = miniMapObjects.style.height = miniMapCtr.style.height = h;

	var ctx = miniMap.getContext("2d");

	ctx.fillStyle = "white";
	ctx.fillRect(0,0,miniMap.width,miniMap.height);

	// loop through all blocks on the map
	for (var y=0;y<mapHeight;y++) {
		for (var x=0;x<mapWidth;x++) {

			var wall = map[y][x];

			if(wall > 0) { // if there is a wall block at this (x,y) ...
				ctx.fillStyle = `rgb(${wallTypes[wall][0]},${wallTypes[wall][1]},${wallTypes[wall][2]})`;
				ctx.fillRect(				// ... then draw a block on the minimap
					x * miniMapScale,
					y * miniMapScale,
					miniMapScale,miniMapScale
				);
			}
		}
	}

	updateMiniMap();
}

setTimeout(init, 1);

</script>



</body>
